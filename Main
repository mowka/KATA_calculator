import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Введите задание:");
        String input = scanner.nextLine();
//        String response = calc(input);
        System.out.println(calc(input));
//        calc(input);
//        System.out.println(calc(input));
    }

    //    -----------------------------Метод задачи для расчёта-----------------------------
    public static String calc(String input) { //наш метод расчёта
        String[] symbols = input.split("\\s++");
        String output;
        if (symbols.length > 3){
            throw new RuntimeException("т.к. формат математической операции не удовлетворяет заданию - два операнда и один оператор (+, -, /, *)");
        }
        if (symbols.length < 3){
            throw new RuntimeException("т.к. строка не является математической операцией");
        }
        String value1 = symbols[0];
        String value2 = symbols[2];
        String operation = symbols[1];
        try {
            int arabic1 = Integer.parseInt(value1); //пробуем с арабскими
            int arabic2 = Integer.parseInt(value2);
            int result = calculater(arabic1, arabic2, operation);
            output = String.valueOf(result);
        } catch (NumberFormatException e){
            int arabic1 = romanToArabic(value1); //пробуем с римскими
            int arabic2 = romanToArabic(value2);
            int result = calculater(arabic1, arabic2, operation);
            output = arabicToRoman(result);
        }
        return output;
    }

    //    -----------------------------Калькулятор-----------------------------
    public static int calculater(int value1, int value2, String operation) {
        int result;
        if ((value1 > 10) || (value1 < 1) || (value2 > 10) || (value2 < 1)) {
            throw new RuntimeException("Недопустимые значения чисел");
        }
        switch (operation) {
            case "+":
                result = (value1 + value2);
                break;
            case "-":
                result = (value1 - value2);
                break;
            case "*":
                result = (value1 * value2);
                break;
            case "/":
                result = (value1 / value2);
                break;
            default:
                throw new RuntimeException("т.к. строка не является математической операцией");
        }
        return result;
    }

    //    -----------------------------Римские в арабски-----------------------------
    public static int romanToArabic(String input) {
        String romanNumeral = input.toUpperCase();
        int result = 0;
        List<RomanNumeral> romanNumerals = RomanNumeral.getReverseSortedValues();
        int i = 0;
        while ((romanNumeral.length() > 0) && (i < romanNumerals.size())) {
            RomanNumeral symbol = romanNumerals.get(i);
            if (romanNumeral.startsWith(symbol.name())) {
                result += symbol.getValue();
                romanNumeral = romanNumeral.substring(symbol.name().length());
            } else {
                i++;
            }
        }
        if (romanNumeral.length() > 0) {
            throw new RuntimeException("т.к. используются одновременно разные системы счисления");
        }
        return result;
    }

    //    -----------------------------Арабские в римские-----------------------------
    public static String arabicToRoman(int number) {
        if ((number <= 0)) {
            throw new RuntimeException("т.к. в римской системе нет отрицательных чисел");
        }
        if (number > 4000) {
            throw new RuntimeException("т.к. число не в диапозоне [1;3999]");
        }

        List<RomanNumeral> romanNumerals = RomanNumeral.getReverseSortedValues();

        int i = 0;
        StringBuilder sb = new StringBuilder();

        while ((number > 0) && (i < romanNumerals.size())) {
            RomanNumeral currentSymbol = romanNumerals.get(i);
            if (currentSymbol.getValue() <= number) {
                sb.append(currentSymbol.name());
                number -= currentSymbol.getValue();
            } else {
                i++;
            }
        }
        return sb.toString();
    }

//    -----------------------------ENUM-----------------------------

    enum RomanNumeral {
        I(1), IV(4), V(5), IX(9), X(10),
        XL(40), L(50), XC(90), C(100);

        private int value;

        RomanNumeral(int value) {
            this.value = value;
        }

        public int getValue() {
            return value;
        }

        public static List<RomanNumeral> getReverseSortedValues() {
            return Arrays.stream(values())
                    .sorted(Comparator.comparing((RomanNumeral e) -> e.value).reversed())
                    .collect(Collectors.toList());
        }
    }
}
